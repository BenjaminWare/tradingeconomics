@using Newtonsoft.Json;
@{
    ViewData["Title"] = @Model.Country;
}

@model CountryViewModel

<div class="wrapper"><div id="country_title">@Model.Country</div><div id="graph"></div></div>
    

@* Linear gradient used with the svg graphs created once here to avoid duplicating it in the JS *@
    <svg>
        <defs>
        <linearGradient id="graph-gradient" x1="0%" x2="0%" y1="0%" y2="100%">
      <stop offset="0%" stop-color="@Model.CountryColor" />
      <stop offset="100%" stop-color="rgba(255,255,255,0)" />
    </linearGradient>
        </defs>
    </svg>
</div>

<script>
    let data = @Html.Raw(JsonConvert.SerializeObject(Model.Data));
    // The data always includes one entry explaining the free tier
    data = data.slice(0,data.length-1)

    
    // Draws one chart for each category of data sent down
    let categories = new Set(data.map(d => d.Category))
    categories.forEach((cat) => {
        drawChart("graph",data.filter(d => d.Category == cat),cat);
    })
    d3.select("#graph").style("display","flex")

    function drawChart(wrapper_id,data,indicator) {
        data = data.map((d) => ({...d,"date":new Date(d.DateTime)}))
    // set the dimensions and margins of the graph

    const margin = {top: 30, right: 30, bottom: 30, left: 60},
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    const wrapper = d3.select("#"+wrapper_id)
    .append("div")
        .attr("class","svg_card")

    wrapper.append("div")
        .attr("class","graph_title")
        .text(indicator)
    // append the svg object to the body of the page
    const svg = wrapper
    .append("svg")
        .attr("width", "100%")
        .attr("height", "100%")
        .attr("viewBox","0 0 460 400")
    .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);



    // Add X axis
    const x = d3.scaleTime()
        .domain(d3.extent(data.map( d=> d.date)))
        .range([0, width])
    svg.append("g")
        .attr("transform", `translate(0, ${height})`)
        .call(d3.axisBottom(x).tickSizeOuter(0).ticks(5));

    // Add Y axis
    const y = d3.scaleLinear()
        .domain(d3.extent(data.map(d => d.Value)))
        .range([ height, 0 ]);
    svg.append("g")
        .call(d3.axisLeft(y).ticks(5));

    const line = svg.append("path")
        .datum(data)
        .attr("fill","none")
        .attr("stroke","@Model.CountryColor")
        .attr("stroke-width","3px")
        .attr("d",d3.line()
            .x((d,i) => width * i)
            .y((d,i) => height- height* i)
        )
        .transition()
        .duration(800)
        .attr("d",d3.line()
            .x(d => x(d.date))
            .y(d => y(d.Value))
        )
    const min_val = d3.min(data.map(d => d.Value))
    const area = svg.append("path")
        .datum(data)
        .attr("fill","url(#graph-gradient)")
        .attr("stroke","none")
        .style("opacity","0")
        .attr("d",d3.area()
            .x((d,i) => x(d.date))
            .y0(y(min_val))
            .y1((d,i) => y(d.Value))
        ).transition()
        .duration(300)
        .style("opacity","1")
        .delay(800)



@* 
    // Show the bars
    svg.append("g")
        .selectAll("g")
        // Enter in the stack data = loop key per key = group per group
        .data(stackedData)
        .join("g")
        .attr("fill", d => color(d.key))
        .selectAll("rect")
        // enter a second time = loop subgroup per subgroup to add all rectangles
        .data(d => d)
        .join("rect")
            .attr("x", d => x(d.data.date))
            .attr("y", d => y(min_val))
            .attr("height", d => (height - y(min_val)))
            .attr("width",(width) / data.length)


    // Animation
    svg.selectAll("rect")
    .transition()
    .duration(800)
    .attr("y", function(d) { return y(d.data.Value); })
    .attr("height", function(d) { return height - y(d.data.Value); })
    .delay(function(d,i){ console.log(data.length);return((i)*(10000 / data.length ))}) *@

}
 </script>

 <style>
#country_title {
    color:black;
    font-size:24px;
    text-transform: capitalize;
    font-weight:700;
    text-align:center;
}
.wrapper {
    margin:0 auto;
    max-width:1272px;
}
#graph {
    display:none;
    width: 100%;
  flex-wrap: wrap;
  margin:0 auto;
  justify-content: center;

}
.svg_card {
    max-width:400px;
    min-width:400px;
    flex:1;
    box-shadow:0 2px 1px 1px lightgray;
    padding:24px;
    margin:12px;
    border-radius:8px;
    box-sizing:border-box;
}

.graph_title {
    margin-right:auto;
    font-size:22px;
    font-weight:700;
}
.tick {
    font-size:16px;
}

</style>