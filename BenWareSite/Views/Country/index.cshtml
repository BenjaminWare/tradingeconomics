@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Home Page";
}

@model CountryViewModel

<div class="text-center">

    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <button onclick="myFunc()">Click Me</button>
    <div id="graph"></div>

</div>

<script>
    let data = @Html.Raw(JsonConvert.SerializeObject(Model.Data));
    // The data always includes one entry explaining the free tier
    data = data.slice(0,data.length-1)


    // TODO use fetch to get other countries if they want and add them to the correct graphs, add labels make it all look nicer Good job today :)
    let gdp = data.filter(d => d.Category == "GDP")
    let population = data.filter(d => d.Category == "Population")
    drawChart("graph",population);
    drawChart("graph",gdp)

    @* async function myFunc() {
        let body = {'country':'sweden','indicator':'gdp'}
        res = await fetch("getdata/")
        json_string = await res.json()
        json = JSON.parse(json_string)
        // The game requires atleast 10 datapoints to play
        while (json.length < 10) {
            res = await fetch("getdata/")
            json_string = await res.json()
            json = JSON.parse(json_string)
        }
        console.log(json)
        // Draws the chart, and discards the last datapoint as it is a message about the free tier
        drawChart("graph",json.slice(0,json.length-1))

    } *@


    function drawChart(wrapper_id,data) {
        data = data.map((d) => ({...d,"date":new Date(d.DateTime)}))
    // set the dimensions and margins of the graph
    const margin = {top: 10, right: 30, bottom: 20, left: 50},
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select("#"+wrapper_id)
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);


    // List of subgroups = header of the csv files = soil condition here
    const subgroups = data.map(d => d.Country)

    // List of groups = species here = value of the first column called group -> I show them on the X axis
    const groups = data.map(d => (d.date))

    // Add X axis
    const x = d3.scaleTime()
        .domain(d3.extent(groups))
        .range([0, width])
    svg.append("g")
        .attr("transform", `translate(0, ${height})`)
        .call(d3.axisBottom(x).tickSizeOuter(0));

    // Add Y axis
    const y = d3.scaleLinear()
        .domain(d3.extent(data.map(d => d.Value)))
        .range([ height, 0 ]);
    svg.append("g")
        .call(d3.axisLeft(y));

    // color palette = one color per subgroup
    const color = d3.scaleOrdinal()
        .domain(subgroups)
        .range(['#e41a1c','#377eb8','#4daf4a'])

    //stack the data? --> stack per subgroup
    const stackedData = d3.stack()
        .keys(subgroups)
        (data)


    // Show the bars
    svg.append("g")
        .selectAll("g")
        // Enter in the stack data = loop key per key = group per group
        .data(stackedData)
        .join("g")
        .attr("fill", d => color(d.key))
        .selectAll("rect")
        // enter a second time = loop subgroup per subgroup to add all rectangles
        .data(d => d)
        .join("rect")
            .attr("x", d => x(d.data.date))
            .attr("y", d => y(d.data.Value))
            .attr("height", d => height - y(d.data.Value))
            .attr("width",(width ) / data.length)


}
 </script>